version: '3.8'

services:
  db:
    image: postgres:15
    container_name: finsight-db
    restart: unless-stopped
    ports: [ "5432:5432" ]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: finsight
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - finsight-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    container_name: finsight-es
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports: [ "9200:9200" ]
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - finsight-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: finsight-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports: [ "2181:2181" ]
    networks:
      - finsight-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: finsight-kafka
    restart: unless-stopped
    ports: [ "9092:9092" ]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - finsight-network

  redis:
    image: redis:7.2.4
    container_name: finsight-redis
    restart: unless-stopped
    ports: [ "6379:6379" ]
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis-data:/data
    networks:
      - finsight-network

  auth-service:
    image: "${ECR_REGISTRY_URL}/auth-service:${IMAGE_TAG}"
    container_name: auth-service
    restart: unless-stopped
    env_file: [ .env ]
    depends_on: [ db ]
    expose: [ "8080" ]
    networks: [ finsight-network ]

  portfolio-service:
    image: "${ECR_REGISTRY_URL}/portfolio-service:${IMAGE_TAG}"
    container_name: portfolio-service
    restart: unless-stopped
    env_file: [ .env ]
    depends_on: [ db ]
    expose: [ "8080" ]
    networks: [ finsight-network ]

  price-service:
    image: "${ECR_REGISTRY_URL}/price-service:${IMAGE_TAG}"
    container_name: price-service
    restart: unless-stopped
    env_file: [ .env ]
    depends_on: [ db ]
    expose: [ "8080" ]
    networks: [ finsight-network ]

  order-service:
    image: "${ECR_REGISTRY_URL}/order-service:${IMAGE_TAG}"
    container_name: order-service
    restart: unless-stopped
    env_file: [ .env ]
    depends_on: [ db, kafka ]
    expose: [ "8080" ]
    networks: [ finsight-network ]

  report-service:
    image: "${ECR_REGISTRY_URL}/report-service:${IMAGE_TAG}"
    container_name: report-service
    restart: unless-stopped
    env_file: [ .env ]
    depends_on: [ db ]
    expose: [ "8080" ]
    networks: [ finsight-network ]

  tax-service:
    image: "${ECR_REGISTRY_URL}/tax-service:${IMAGE_TAG}"
    container_name: tax-service
    restart: unless-stopped
    env_file: [ .env ]
    depends_on: [ db ]
    expose: [ "8080" ]
    networks: [ finsight-network ]

  sns-service:
    image: "${ECR_REGISTRY_URL}/sns-service:${IMAGE_TAG}"
    container_name: sns-service
    restart: unless-stopped
    env_file: [ .env ]
    depends_on: [ db, redis, kafka, elasticsearch ]
    expose: [ "8080" ]
    networks: [ finsight-network ]

  nginx:
    image: nginx:stable-alpine
    container_name: finsight-nginx
    restart: unless-stopped
    ports: [ "80:80" ]
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth-service
      - portfolio-service
      - price-service
      - order-service
      - report-service
      - tax-service
      - sns-service
    networks: [ finsight-network ]

volumes:
  db-data:
  es-data:
  redis-data:

networks:
  finsight-network:
    driver: bridge
